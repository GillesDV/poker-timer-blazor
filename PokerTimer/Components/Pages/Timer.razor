<p style="font-size: 2rem;">
    @TimeDisplay
</p>

<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="StartCountdown" disabled="@isRunning"> 
    Start countdown 
</MudButton>

<MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="StopCountdown" disabled="@(!isRunning)">
    Stop countdown
</MudButton>

@code {
    [Parameter]
    public EventCallback OnTimerHitZero { get; set; }

    private int remainingSeconds = 5; //60 * 20;
    private bool isRunning = false;
    private System.Threading.Timer? timer;

    private string TimeDisplay =>
        $"{remainingSeconds / 60:D2}:{remainingSeconds % 60:D2}";

    private void StartCountdown()
    {
        if (isRunning)
            return;

        isRunning = true;

        timer = new System.Threading.Timer(async _ =>
        {
            if (remainingSeconds > 0)
            {
                remainingSeconds--;
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                timer?.Dispose();
                isRunning = false;
                await InvokeAsync(StateHasChanged);

                // Timer runs on a non-blazor thread, and we need to fire this event on the Blazor thread 
                //  to avoid an exception: "The current thread is not associated with the Dispatcher"
                await InvokeAsync(async () =>
                {
                    await OnTimerHitZero.InvokeAsync();
                });

            }
        }, null, 1000, 1000);
    }

    private async Task StopCountdown()
    {
        if (!isRunning)
            return;

        if (timer != null)
        {
            timer.Dispose();
            isRunning = false;
            await InvokeAsync(StateHasChanged);
        }
    }
}
