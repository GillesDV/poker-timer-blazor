<div class="py-4 px-6 mx-4 rounded-xl" style="background-color: black; color: white; margin-top: 20px; margin-bottom: 20px;">
    <MudText Align="Align.Center" style="font-size: 7em;">
        @TimeDisplay
    </MudText>
</div>


@* <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="StartCountdown" disabled="@isRunning">
    Start countdown
</MudButton>

<MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="StopCountdown" disabled="@(!isRunning)">
    Stop countdown
</MudButton> *@

@code {
    private string TimeDisplay => $"{remainingSeconds / 60:D2}:{remainingSeconds % 60:D2}";

    [Parameter]
    public EventCallback OnTimerHitZero { get; set; }

    [Parameter]
    public int selectedBlindTimerInSeconds { 
        get; 
        set
        {
            // Field is the underlying _selectedBlindTimerInSeconds
            // reset the countdown when the timer value changes
            field = remainingSeconds = value;
        }
    }

    private int remainingSeconds; 
    private bool isRunning = false;

    public async Task StartCountdown()
    {
        isRunning = true;

        while (remainingSeconds > 0 && isRunning)
        {
            // Previously this used a Timer but that caused issues with different threads trying to fire events. This is shorter & simpler.
            await Task.Delay(1000);
            remainingSeconds--;
            StateHasChanged();
        }

        if (isRunning)
        {
            // notify parent component that the timer hit zero
            await OnTimerHitZero.InvokeAsync();

            // Reset the timer
            remainingSeconds = selectedBlindTimerInSeconds;
            await StartCountdown();
        }
    }

    public void StopCountdown() => isRunning = false;

}
