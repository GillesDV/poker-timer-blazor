<p style="font-size: 2rem;">
    @TimeDisplay
</p>

<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="StartCountdown" disabled="@isRunning">
    Start countdown
</MudButton>

<MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="StopCountdown" disabled="@(!isRunning)">
    Stop countdown
</MudButton>

@code {
    private string TimeDisplay =>
        $"{remainingSeconds / 60:D2}:{remainingSeconds % 60:D2}";

    [Parameter]
    public EventCallback OnTimerHitZero { get; set; }

    private int remainingSeconds = 5; //60 * 20;
    private bool isRunning = false;

    public async Task StartCountdown()
    {
        isRunning = true;

        while (remainingSeconds > 0 && isRunning)
        {
            // Previously this used a Timer but that caused issues with different threads trying to fire events. This is shorter & simpler.
            await Task.Delay(1000);
            remainingSeconds--;
            StateHasChanged();
        }

        if (isRunning)
        {
            await OnTimerHitZero.InvokeAsync();
        }
    }

    public void StopCountdown() => isRunning = false;

}
