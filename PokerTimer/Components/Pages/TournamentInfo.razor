@rendermode InteractiveServer


<div class="py-4 px-6 mx-4 rounded-xl" style="background-color: #F2F7F4; margin-top: 20px;">
    <div style="font-size: 1.5em; padding-bottom: 0.5em;">
        Tournament Info
    </div>

    <div class="d-flex flex-grow-1 gap-4">
        <MudPaper Class="flex-initial d-flex " Style="justify-content: center; box-shadow: none; flex-direction: column; background-color: #F2F7F4" Width="25%">
            <div>
                Total players:
            </div>
            <span style="display:flex; flex-direction: row; justify-content: center; font-size: 1.5em;">
                <MudButton Variant="Variant.Filled" Style="margin: 10px; background-color: white;" @onclick="() => ChangeTotalPlayers(-1)"> -1 </MudButton>
                <div style="margin-top: 13px;">
                    @TotalPlayers
                </div>
                <MudButton Variant="Variant.Filled" Style="margin: 10px; background-color: white;" @onclick="() => ChangeTotalPlayers(+1)"> +1 </MudButton>
            </span>
        </MudPaper>

        <MudPaper Class="flex-initial d-flex " Style="justify-content: center; box-shadow: none; flex-direction: column; background-color: #F2F7F4" Width="25%">
            <div>
                Players Remaining:
            </div>
            <span style="display:flex; flex-direction: row; justify-content: center; font-size: 1.5em;">
                <MudButton Variant="Variant.Filled" Style="margin: 10px; background-color: white;" @onclick="() => ChangeRemainingPlayers(-1)"> -1 </MudButton>
                <div style="margin-top: 13px;">
                    @RemainingPlayers
                </div>
                <MudButton Variant="Variant.Filled" Style="margin: 10px; background-color: white;" @onclick="() => ChangeRemainingPlayers(+1)"> +1 </MudButton>
            </span>
        </MudPaper>

        <MudPaper Class="flex-initial d-flex " Style="justify-content: center; box-shadow: none; flex-direction: column; background-color: #F2F7F4" Width="25%">
            <div>
                Average Stack:
            </div>
            <span style="display:flex; flex-direction: column; justify-content: center; font-size: 1.5em;">

                <div>
                    @DisplayAverageStack()
                </div>

                <div style="font-size: 0.8em; color: darkgrey;">
                    @DisplayAmountOfBigBlind()
                </div>
            </span>

        </MudPaper>
        <MudPaper Class="flex-initial d-flex" Style="justify-content: center; box-shadow: none; flex-direction: column; background-color: #F2F7F4" Width="25%">
            <div>
                Timer Controls
            </div>
            <span style="display:flex; flex-direction: column; justify-content: center; font-size: 1.5em;">
                @if (BlindTimerHasBeenSelected)
                {
                    <div>
                        <MudButton Class="rounded-lg" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.PlayArrow"
                                   style="background-color: limegreen; color: white;"
                                   @onclick="() => TriggerCountdown(true)" disabled="@(IsStartButtonDisabled())">
                            <span style="padding-top: 2px;">
                                Start
                            </span>

                        </MudButton>

                        <MudButton Class="rounded-lg" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Pause"
                                   style="background-color: white; color: limegreen; border: 2px solid limegreen;"
                                   @onclick="() => TriggerCountdown(false)" disabled="@(!CountdownIsRunning)">
                            <span style="padding-top: 2px;">
                                Pause
                            </span>
                        </MudButton>
                    </div>

                    <div style="font-size: 0.8em; color: darkgrey; padding-top: 6px;">
                        <MudButton Class="rounded-lg" Variant="Variant.Outlined" IconColor="Color.Dark" StartIcon="@Icons.Material.Filled.VolumeUp"
                                   style="background-color: white; border: 2px solid grey; padding-right: 5px;" />

                        <MudButton Class="rounded-lg" Variant="Variant.Outlined"
                                   style="background-color: white; border: 2px solid grey;"
                                   @onclick="() => GoToNextLevel()" disabled="@(IsSkipLevelButtonDisabled())">
                            Next level
                        </MudButton>
                    </div>
                }
                else
                {
                    <div style="color: indianred;">
                        Please select # minutes per blind level first
                    </div>
                }

               
            </span>
        </MudPaper>
    </div>

</div>




@code {
@using Microsoft.Extensions.Logging
@using PokerTimer.Domain.Constants
@inject ILogger<TournamentInfo> _logger

    protected override void OnInitialized()
    {
        #if (DEBUG)
            _logger.LogDebug("TournamentInfo Logger initialized");
        #endif
    }

    public string DisplayAverageStack()
    {
        if (TotalPlayers == 0)
        {
            return "0K";
        }
        var averageStack = getAverageStack();
        return $"{averageStack / 1000}K";
    }

    private int getAverageStack()
    {
        if (RemainingPlayers == 0)
        {
            return 0;
        }
        const int defaultStartingStack = 100_000;
        return (TotalPlayers * defaultStartingStack) / RemainingPlayers;
    }

    public string DisplayAmountOfBigBlind()
    {
        if (TotalPlayers == 0)
            {
                return "0 BB";
        }
        var averageStack = getAverageStack();
        var currentBigBlind = BlindValues.AllBlinds[TimerExpirationCount, 1];
        return $"{averageStack / currentBigBlind:0.0} BB";
    }

    public bool IsStartButtonDisabled()
    {
        if (!BlindTimerHasBeenSelected)
        {
            return true;
        }

        if (BlindValues.AllBlinds.GetLength(0) <= TimerExpirationCount)
        {
            return true;
        }

        return CountdownIsRunning;
    }

    public bool IsSkipLevelButtonDisabled()
    {
        if (!BlindTimerHasBeenSelected)
        {
            return true;
        }

        if (BlindValues.AllBlinds.GetLength(0) <= (TimerExpirationCount + 1))
        {
            return true;
        }

        return CountdownIsRunning;
    }

    [Parameter]
    public int TotalPlayers { get; set; }
    [Parameter]
    public EventCallback<int> TotalPlayersChanged { get; set; }

    private async Task ChangeTotalPlayers(int delta)
    {
        var newValue = TotalPlayers + delta;

        if (newValue > RemainingPlayers)
        {
            RemainingPlayers = RemainingPlayers + delta;
            await RemainingPlayersChanged.InvokeAsync(RemainingPlayers);
        }

        TotalPlayers = newValue;
        await TotalPlayersChanged.InvokeAsync(newValue);
    }

    bool ArePlayerValuesEqual() => RemainingPlayers == TotalPlayers;

    [Parameter]
    public int RemainingPlayers { get; set; }
    [Parameter]
    public EventCallback<int> RemainingPlayersChanged { get; set; }

    private async Task ChangeRemainingPlayers(int delta)
    {
        var newValue = RemainingPlayers + delta;
        RemainingPlayers = newValue;

        await RemainingPlayersChanged.InvokeAsync(newValue);
    }

    [Parameter]
    public bool CountdownIsRunning { get; set; }
    [Parameter]
    public EventCallback<bool> CountdownIsRunningChanged { get; set; }

    private async Task TriggerCountdown(bool newValue)
    {
        CountdownIsRunning = newValue;

        await CountdownIsRunningChanged.InvokeAsync(newValue);
    }

    private async Task GoToNextLevel()
    {
        await OnNextLevelRequested.InvokeAsync();
    }

    [Parameter]
    public EventCallback OnNextLevelRequested { get; set; }

    [Parameter] 
    public bool BlindTimerHasBeenSelected { get; init; }

    [Parameter]
    public int TimerExpirationCount { get; init; }
}