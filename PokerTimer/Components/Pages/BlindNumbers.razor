<div class="d-flex flex-grow-1 gap-4">
    <MudPaper Class="flex-initial d-flex py-8 " Style="justify-content: center;" Width="65%" Elevation="0">


        <div class="py-4 px-6 mx-4 rounded-xl pa-8" style="background-color: grey; color: #095C2D; margin-top: 20px; margin-bottom: 20px;">
            <MudText Align="Align.Center" style="font-size: 2.5em;">

                @if (CanShowBlinds())
                {
                    <span>Current blinds</span>
                    <MudText Align="Align.Center" style="font-size: 3em; justify-content: center;">
                        @($"{allBlinds[AmountOfTimesTimerHasExpired, 0]} / {allBlinds[AmountOfTimesTimerHasExpired, 1]}")
                    </MudText>
                }
                else
                {
                    <MudText Align="Align.Center" style="font-size: 2em; justify-content: center;">
                        Blinds not available
                    </MudText>
                }
            </MudText>
        </div>
    </MudPaper>

    <MudPaper Class="flex-initial d-flex py-8 " Style="justify-content: center;" Width="35%" Elevation="0">

        <div class="py-4 px-6 mx-4 rounded-xl pa-4" style="background-color: grey; color: blue; margin-top: 20px; margin-bottom: 20px;">
            <MudText Align="Align.Center" style="font-size: 2.5em;">

                @if (CanShowNextBlinds())
                {
                    <span>Next blinds</span>
                    <MudText Align="Align.Center" style="font-size: 1.5em;">
                        @($"{allBlinds[AmountOfTimesTimerHasExpired + 1, 0]} / {allBlinds[AmountOfTimesTimerHasExpired + 1, 1]}")
                    </MudText>
                }
                else
                {
                    <MudText Align="Align.Center" style="font-size: 1em;">
                        Next Blinds not available
                    </MudText>
                }
            </MudText>
        </div>
    </MudPaper>
</div>

@code {

    [Parameter]
    public int AmountOfTimesTimerHasExpired { get; init; }

    private bool CanShowBlinds()
    {
        return AmountOfTimesTimerHasExpired >= 0 && AmountOfTimesTimerHasExpired < allBlinds.GetLength(0);
    }

    private bool CanShowNextBlinds()
    {
        return AmountOfTimesTimerHasExpired >= 0 && AmountOfTimesTimerHasExpired + 1 < allBlinds.GetLength(0);
    }

    // TODO move me to a separate file, for better separation of concerns?

    // TODO can possibly make this mathematically generated instead of statically defined.
    // Input: how many levels, how many players (+ rebuys), how long should a level / blind last
    // ref: https://www.reddit.com/r/poker/comments/u4pxrx/is_there_a_good_formula_to_calculate_a_tournament
    int[,] allBlinds = {
        { 100, 200 },
        { 200, 400 },
        { 300, 400 },
        { 400, 800 },
        { 500, 1_000 },
        { 600, 1_200 },
        { 1_000, 1_500 },
        { 1_000, 2_000 },


    };


}
