@using PokerTimer.Domain.Constants

<div class="py-4 px-6 mx-4 rounded-xl" style="background-color: #F2F7F4; color: #095C2D; margin-top: 20px; margin-bottom: 20px;">
    <MudText Align="Align.Center" style="font-size: 2.5em;">

        @if (CanShowBlinds())
        {
            <span>Current blinds</span>
            <MudText Align="Align.Center" style="font-size: 3em; justify-content: center; color: #095C2D">
                @($"{BlindValues.AllBlinds[AmountOfTimesTimerHasExpired, 0]}  /  {BlindValues.AllBlinds[AmountOfTimesTimerHasExpired, 1]}")
            </MudText>
        }
        else
        {
            <MudText Align="Align.Center" style="font-size: 2em; justify-content: center;">
                Blinds not available
            </MudText>
        }
    </MudText>

    <MudDivider DividerType="DividerType.Middle" Style="margin-bottom: 1em;" />

    <MudText Align="Align.Center" style="font-size: 2em; color: darkred;">
        @if (CanShowNextBlinds())
        {
            <span>Next blinds</span>
            <MudText Align="Align.Center" style="font-size: 1.5em; ">
                @($"{BlindValues.AllBlinds[AmountOfTimesTimerHasExpired + 1, 0]} / {BlindValues.AllBlinds[AmountOfTimesTimerHasExpired + 1, 1]}")
            </MudText>
        }
        else
        {
            <MudText Align="Align.Center" style="font-size: 1em;">
                Next Blinds not available
            </MudText>
        }
    </MudText>

</div>

@code {

    [Parameter]
    public int AmountOfTimesTimerHasExpired { get; init; }

    private bool CanShowBlinds()
    {
        return AmountOfTimesTimerHasExpired >= 0 && AmountOfTimesTimerHasExpired < BlindValues.AllBlinds.GetLength(0);
    }

    private bool CanShowNextBlinds()
    {
        return AmountOfTimesTimerHasExpired >= 0 && AmountOfTimesTimerHasExpired + 1 < BlindValues.AllBlinds.GetLength(0);
    }

}
