@rendermode InteractiveServer

<div style="font-size: 1.5em;">
    Tournament Info
</div>

<div class="d-flex flex-grow-1 gap-4">
    <MudPaper Class="flex-initial d-flex py-8 " Style="justify-content: center; box-shadow: none; flex-direction: column;" Width="25%">
        <div>
            Total players:
        </div>
        <span style="display:flex; flex-direction: row; justify-content: center; font-size: 1.5em;">
            <MudButton Variant="Variant.Filled" Style="margin: 10px;" Color="Color.Transparent" @onclick="() => ChangeTotalPlayers(-1)"> -1 </MudButton>
            <div style="margin-top: 13px;">
                @TotalPlayers
            </div>
            <MudButton Variant="Variant.Filled" Style="margin: 10px;" Color="Color.Transparent" @onclick="() => ChangeTotalPlayers(+1)"> +1 </MudButton>
        </span>        
    </MudPaper>

    <MudPaper Class="flex-initial d-flex py-8 " Style="justify-content: center; box-shadow: none; flex-direction: column;" Width="25%">
        <div>
            Players Remaining:
        </div>
        <span style="display:flex; flex-direction: row; justify-content: center; font-size: 1.5em;">
            <MudButton Variant="Variant.Filled" Style="margin: 10px;" Color="Color.Transparent" @onclick="() => ChangeRemainingPlayers(-1)"> -1 </MudButton>
            <div style="margin-top: 13px;">
                @RemainingPlayers
            </div>
            <MudButton Variant="Variant.Filled" Style="margin: 10px;" Color="Color.Transparent" @onclick="() => ChangeRemainingPlayers(+1)"> +1 </MudButton>
        </span>
    </MudPaper>

    <MudPaper Class="flex-initial d-flex py-8 " Style="justify-content: center; box-shadow: none; flex-direction: column;" Width="25%">
        <div>
            Average Stack:
        </div>
        <span style="display:flex; flex-direction: column; justify-content: center; font-size: 1.5em;">
            
            <div>
                42K
            </div>

            <div style="font-size: 0.8em; color: darkgrey;">
                20.4 BB
            </div>
        </span>

    </MudPaper>
    <MudPaper Class="flex-initial d-flex py-8 mud-theme-primary" Width="25%">
        
    </MudPaper>
</div>


@*     Players Remaining:
    <br />
    <MudButton Variant="Variant.Filled" Color="Color.Transparent" @onclick="() => ChangeCurrentPlayers(-1)"> -1 </MudButton>
    <div style="font-size: 2em;">
        @CurrentPlayers
    </div>

    <MudButton Variant="Variant.Filled" Color="Color.Transparent" @onclick="() => ChangeCurrentPlayers(+1)"> +1 </MudButton> *@


@* <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => ChangeCurrentPlayers(-1)"> -1 </MudButton>
Current players: @CurrentPlayers
<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => ChangeCurrentPlayers(+1)"> +1 </MudButton>

<br />

<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => ChangeTotalPlayers(-1)"> -1 </MudButton>
Total players: @TotalPlayers
<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => ChangeTotalPlayers(+1)"> +1 </MudButton>

<br />
# minute blinds:
<MudRadioGroup T="int" @bind-Value="SelectedBlindTimerInSeconds" >

    <MudRadio Color="Color.Primary" UncheckedColor="Color.Default" Value="600">10</MudRadio>
    <MudRadio Color="Color.Primary" UncheckedColor="Color.Default" Value="900">15</MudRadio>
    <MudRadio Color="Color.Primary" UncheckedColor="Color.Default" Value="1200">20</MudRadio>
    <MudRadio Color="Color.Primary" UncheckedColor="Color.Default" Value="1800">30</MudRadio>
    <MudRadio Color="Color.Primary" UncheckedColor="Color.Default" Value="2700">45</MudRadio>
    <MudRadio Color="Color.Primary" UncheckedColor="Color.Default" Value="3600">60</MudRadio>
    <MudRadio Color="Color.Primary" UncheckedColor="Color.Default" Value="5">5 seconds (demo)</MudRadio>
</MudRadioGroup>
 *@
@code {
@using Microsoft.Extensions.Logging
@inject ILogger<AdminInput> _logger

    protected override void OnInitialized()
    {
        _logger.LogDebug("AdminInput Logger initialized");
    }

    [Parameter]
    public int TotalPlayers { get; set; }
    [Parameter]
    public EventCallback<int> TotalPlayersChanged { get; set; }

    private async Task ChangeTotalPlayers(int delta)
    {
        var newValue = TotalPlayers + delta;

        if (newValue > RemainingPlayers)
        {
            RemainingPlayers = RemainingPlayers + delta;
            await RemainingPlayersChanged.InvokeAsync(RemainingPlayers);
        }

        TotalPlayers = newValue;
        await TotalPlayersChanged.InvokeAsync(newValue);
    }

    bool ArePlayerValuesEqual() => RemainingPlayers == TotalPlayers;

    [Parameter]
    public int RemainingPlayers { get; set; }
    [Parameter]
    public EventCallback<int> RemainingPlayersChanged { get; set; }

    private async Task ChangeRemainingPlayers(int delta)
    {
        var newValue = RemainingPlayers + delta;
        RemainingPlayers = newValue;

        await RemainingPlayersChanged.InvokeAsync(newValue);
    }


    [Parameter]
    public int SelectedBlindTimerInSeconds
    {
        get;
        set
        {
            if (field == value) return;
            field = value;
            // forward change to parent (fire-and-forget is fine here)
            _ = SelectedBlindTimerInSecondsChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<int> SelectedBlindTimerInSecondsChanged { get; set; }

}